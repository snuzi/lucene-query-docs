clustering and the underlying theory overlaps somewhat, see [32] for an explanation
and the details.

Let's use the edge weights from the original normalized cuts paper [32]. The edge
weight connecting two pixels 2' and j is given by

wig. : e-|1z‘—1y‘|2/Ug 6-lxz‘-Xylg/Ud _

The ﬁrst part measures the pixel similarity between the pixels with Ii and I 3» denoting
either the RGB vectors or the grayscale values. The second part measures the prox-
imity between the pixels in the image with xi and xj denoting the coordinate vector of
each pixel. The scaling factors 09 and ad determine the relative scales and how fast
each component approaches zero.
Let's see what this looks like in code. Add the following function to a ﬁle ncut.py.

def ncut,graph,matriX(im,sigma,d=le2,sigma,g=le-2):
”"" Create matrix for normalized cut. The parameters are
the weights for pixel distance and pixel similarity. ”""

m,n = im.shape[:2]
N = m*n
# normalize and create feature vector of RGB or grayscale
if len(im.shape)==3:

for i in range(3):

im[:,:,i] = im[ ,:,i] / im[ ,:,i].max()

vim = im.reshape((-1,3))
else:
im = im / im.max()
vim = im.f1atten()

# x,y coordinates for distance computation
xx,yy = meshgrid(range(n),range(m))
x,y = xx.flatten(),yy.f1atten()

# create matrix with edge weights
W = zeros((N,N),'f')
for i in range(N):
for j in range(i,N):
d = (X[i]-X[J'])**2 + (y[i]-y[J'])**2
W[i,j] = W[j,i] = exp(—l.0*sum((vim[i]—vim[j])**2)/sigmaig) * exp(—d/sigmaid)

return W

This function takes an image array and creates a feature vector using either RGB
values or grayscale values depending on the input image. Since the edge weights
contain a distance component we use meshgrid() to get the :r and y values for each

9.2. Segmentation using Clustering 249

