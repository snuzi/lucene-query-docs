def Haffineifromipoints(fp,tp):
”"" Find H, affine transformation, such that
tp is affine transf of fp. ”""

if fp.shape != tp.shape:
raise RuntimeError('number of points do not match’)

# condition points

# --from points--

m = mean(fp[:2], axis=l)

maxstd = max(std(fp[:2], axis=l)) + 1e-9
C1 = diag([l/maxstd, 1/maxstd, 1])
C1[0][2] = -m[0]/maxstd

Cl[l][2] = -m[l]/maxstd

fpicond = dot(C1,fp)

# --to points--

m = mean(tp[:2], axis=l)

C2 = C1.copy() #must use same scaling for both point sets
C2[0][2] = —m[0]/maxstd

C2[l][2] = —m[l]/maxstd

tpicond = dot(C2,tp)

# conditioned points have mean zero, so translation is zero
A = concatenate((fp_cond[:2],tp_cond[:2]), axis=0)
U,S,V = 1ina1g.svd(A.T)

# create B and C matrices as Hartley-Zisserman (2:nd ed) p 130.
tmp = V[:2].T

B = tmp[:2]

C tmp[2:4]

tmp2 = concatenate((dot(C,1ina1g.pinv(B)),zeros((2,l))), axis=l)
H = vstack((tmp2,[0,0,l]))

# decondition
H = dot(1ina1g.inv(C2),dot(H,C1))

return H / H[2,2]

Again the points are conditioned and de-conditioned as in the DLT algorithm. Let's see
what these afﬁne transformations can do with images in the next section.

3.1. Homographies 77

