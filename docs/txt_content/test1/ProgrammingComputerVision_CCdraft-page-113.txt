caml = camera.Camera( hstack((K,dot(K,array([[0],[0],[—1]])) )) )
# first points are the bottom square
boxicaml = caml.project(homography.make,homog(boX[:,:5]))

# use H to transfer points to the second image
boxitrans = homography.norma1ize(dot(H,box,caml))

# compute second camera matrix from caml and H
cam2 = camera.Camera(dot(H,cam1.P))

A = dot(1ina1g.inv(K),cam2.P[:,:3])

A = array([A[:,0],A[:,l],cross(A[:,0],A[:,l])]).T
cam2.P[:,:3] = dot(K,A)

# project with the second camera
box,cam2 = cam2.project(homography.make,homog(box))

# test: projecting point on z=0 should give the same
point = array([l,l,0,l]).T

print homography.norma1ize(dot(dot(H,caml.P),point))
print cam2.project(point)

Here we use a version of the image with resolution 747 x 1000 and ﬁrst generate the
calibration matrix for that image size. Next points for a cube at the origin is created.
The ﬁrst ﬁve points generated by cube _points() correspond to the bottom, which in
this case will lie on the plane deﬁned by Z = 0, the plane of the marker. The ﬁrst
image (top left in Figure 4.4) is roughly a straight frontal View of the book and will be
used as our template image. Since the scale of the scene coordinates is arbitrary, we
create a ﬁrst camera with matrix

0
00,
1

which has coordinate axis aligned with the camera and placed above the marker. The
ﬁrst ﬁve 3D points are projected onto the image. With the estimated homography we
can transform these to the second image. Plotting them should show the corners at
the same marker locations (see top right in Figure 4.4).

Now, composing P1 with H as a camera matrix for the second image,

Pg=HP1,

will transform points on the marker plane Z = 0 correctly. This means that the ﬁrst
two columns and the fourth column of P2 are correct. Since we know that the ﬁrst
3 x 3 block should be KR and R is a rotation matrix, we can recover the third column

4.3. Pose Estimation from Planes and Markers 113

