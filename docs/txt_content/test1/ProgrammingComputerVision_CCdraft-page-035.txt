for the details. Figure 1.1 1 shows the derivatives and gradient magnitude for different
scales. Compare this to the blurring at the same scales in Figure 1.9.

Morphology - counting objects

Morphology (or mathematical morphology) is a framework and a collection of image
processing methods for measuring and analyzing basic shapes. Morphology is usually
applied to binary images but can be used with grayscale also. A binary image is an
image in which each pixel takes only two values, usually 0 and 1. Binary images are
often the result of thresholding an image, for example with the intention of counting
objects or measuring their size. A good summary of morphology and how it works is
in http://en .wikipedia . org/wiki/Mathematical_morphology.

Morphological operations are included in the scipy.ndimage module morphology.
Counting and measurement functions for binary images are in the scipy.ndimage mod-
ule measurements. Let's look at a simple example of how to use them.

Consider the binary image in Figure 1.12a3. Counting the objects in that image
can be done using

from scipy.ndimage import measurements,morphology

# load image and threshold to make sure it is binary
im array(Image.open('houses.png').convert('L'))
im = 1*(im<128)

labels, nbriobjects = measurements.label(im)
print "Number of objects:", nbr_objects

This loads the image and makes sure it is binary by thresholding. Multiplying with
1 converts the boolean array to a binary one. Then the function 1abe1() ﬁnds the
individual objects and assigns integer labels to pixels according to which object they
belong to. Figure 1.12b shows the labels array. The graylevel values indicate object
index. As you can see, there are small connections between some of the objects. Using
an operation called binary opening, we can remove them.

# morphology - opening to separate objects better
imiopen = morphology. binary,opening(im,ones( (9,5) ) ,iterations=2)

labelsiopen, nbriobjectsiopen = measurements.label(im_open)
print "Number of objects:", nbr_objects,open

3This image is actually the result of image "segmentation". Take a look at Section 9.3 if you want to
see how this image was created.

1.4. SciPy 35

