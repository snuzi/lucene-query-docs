self.nbr_words = 0

def train(self,featurefiles,k=100,subsampling=10):
""" Train a vocabulary from features in files listed
in featurefiles using k-means with k number of words.
Subsampling of training data can be used for speedup. """

nbr_images = len(featurefiles)

# read the features from file

descr = []

descr.append(sift.read_features_from_file(featurefiles[0])[1])

descriptors = descr[0] #stack all features for k-means

for i in arange(l,nbr,images):
descr.append(sift.read,features_from_file(featurefiles[i])[1])
descriptors = vstack((descriptors,descr[i]))

# k-means: last number determines number of runs
self.voc,distortion = kmeans(descriptors[::subsampling,:],k,1)
self.nbr_words = self.voc.shape[0]

# go through all training images and project on vocabulary
imwords = zeros((nbr_images,self.nbr_words))
for i in range( nbriimages ):
imwords[i] = self.project(descr[i])

nbr_occurences = sum( (imwords > 0)*1 ,axis=0)

self.idf = log( (1.0*nbr,images) / (1.0*nbr,occurences+1) )
self.trainingdata = featurefiles

def project(self,descriptors):
""" Project descriptors on the vocabulary
to create a histogram of words. """

# histogram of image words
imhist = zeros((self.nbr,words))
words,distance = vq(descriptors,self.voc)
for w in words:
imhist[w] += 1

return imhist
The class Vocabulary contains a vector of word cluster centers VOC together with the

idf values for each word. To train the vocabulary on some set of images, the method
train() takes a list of .sift descriptor ﬁles and k, the desired number of words for the

7.2.VﬁsualVVords 189

