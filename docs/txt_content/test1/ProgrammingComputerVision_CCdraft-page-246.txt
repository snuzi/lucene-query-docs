# load image and annotation map
im = array(Image.open('376043.jpg'))
m = array(Image.open(’376043.bmp’))

# resize

scale = 0.1

im = imresize(im,scale,interp=’bilinear’)
m = imresize(m,scale,interp=’nearest’)

# create training labels
labels = create_msr_labels(m,False)

# build graph using annotations
g = graphcut.build_bayes_graph(im,labels,kappa=2)

# cut graph
res = graphcut.cut_graph(g,im.shape[:2])

# remove parts in background
res[m==0] = 1
res[m==64] = 1

# plot the result
figure()

imshow(res)

9Fay()

xticks([])

yticks([])
savefig('labelplot.pdf')

First we deﬁne a helper function to read the annotation images and format them so
we can pass them to our function for training background and foreground models.
The bounding rectangles contain only background labels. In this case we set the fore-
ground training region to the whole "unknown" region (the inside of the rectangle).
Next we build the graph and cut it. Since we have user input we remove results that
have any foreground in the marked background area. Last, we plot the resulting seg-
mentation and remove the tick markers by setting them to an empty list. That way we
get a nice bounding box (otherwise the boundaries of the image will be hard to see in
this black and white plot).

Figure 9.4 shows some results using RGB vector as feature with the original image,
a downsampled mask and downsampled resulting segmentation. The image on the
right is the plot generated by the script above.

246 9.1.Graph.Cuts

