for i in range(V.shape[l]):
V[:,i] /= 5
else:

# PCA - SVD used

U,S,V = linalg.svd(X)

V = V[:num,data] # only makes sense to return the first numidata

# return the projection matrix, the variance and the mean
return V,S,mean,X

This function ﬁrst centers the data by subtracting the mean in each dimension. Then
the eigenvectors corresponding to the largest eigenvalues of the covariance matrix
are computed, either using a compact trick or using SVD. Here we used the function
range() which takes an integer n and returns a list of integers 0. . . (n — 1). Feel free to
use the alternative arange() which gives an array or xrange() which gives a generator
(and might give speed improvements). We will stick with range() throughout the book.

We switch from SVD to use a trick with computing eigenvectors of the (smaller)
covariance matrix X X T if the number of data points is less than the dimension of the
vectors. There are also ways of only computing the eigenvectors corresponding to
the k: largest eigenvalues (k: being the number of desired dimensions) making it even
faster. We leave this to the interested reader to explore since it is really outside the
scope of this book. The rows of the matrix V are orthogonal and contain the coordinate
directions in order of descending variance of the training data.

Let's try this on an example of font images. The ﬁle font1'mages.z1'p contains small
thumbnail images of the character "a" printed in different fonts and then scanned. The
2359 fonts are from a collection of freely available fonts2. Assuming that the ﬁlenames
of these images are stored in a list, 1'm11'st, along with the previous code, in a ﬁle pca.py,
the principal components can be computed and shown like this:
from PIL import Image
from numpy import *

from pylab import *
import pca

im = array(Image.open(imlist[0])) # open one image to get size
m,n = im.shape[0:2] # get the size of the images
imnbr = len(imlist) # get the number of images

# create matrix to store all flattened images
immatrix = array([array(Image.open(im)).flatten()
for im in imlist],'f')

Zhnages courtesy of hlarun SOHL http://webstaff.itn.liu.se/~marso/, coﬂected and.rendered
from publicly available free fonts.

28 1.3.NumPy

