from numpy import *

def denoise(im,Uiinit,to1erance=0.1,tau=0.125,tv_weight=100):

“"" An implementation of the Rudin-Osher-Fatemi (ROF) denoising model
using the numerical procedure presented in eq (11) A. Chambolle (2005).

Input: noisy input image (grayscale), initial guess for U, weight of
the TV-regularizing term, steplength, tolerance for stop criterion.

Output: denoised and detextured image, texture residual. “""

m,n = im.shape #size of noisy image

# initialize

U = Uiinit

PX = im #x-component to the dual field
Py = im #y-component of the dual field
error = 1

while (error > tolerance):

Uold = U

# gradient of primal variable

GradUx = ro11(U,-1,axis=1)-U # x-component of U’s gradient
GradUy = ro11(U,-1,axis=0)-U # y-component of U’s gradient

# update the dual varible

PxNew = Px + (tau/tv_weight)*GradUx

PyNew = Py + (tau/tv_weight)*GradUy

NormNew = maximum(1,sqrt(PxNew**2+PyNew**2))

PX
Py

PxNew/NormNew # update of X-component (dual)
PyNew/NormNew # update of y-component (dual)

# update the primal variable

RXPX = roll(Px,l,axis=l) # right X-translation of X-component

RyPy

DivP

roll(Py,l,axis=0) # right y-translation of y-component

(Px—RxPx)+(Py-RyPy) # divergence of the dual field.

U = im + tv_weight*DivP # update of the primal variable

# update of error
error = linalg.norm(U-Uold)/sqrt(n*m);

return U,im—U # denoised image and texture residual

In this example, we used the function roll(), which as the name suggests, "rolls" the

40

L5.Advancedexanuﬂe:hnagedequﬂﬁng

