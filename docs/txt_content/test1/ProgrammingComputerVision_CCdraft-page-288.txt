if len(sys.argv)>1:
tag = sys.argv[1]
else:
print 'no tag specified’

# downloading image data
f = flickr.photos_search(tags=tag)
urllist = [] #store a list of what was downloaded

# downloading images

for k in f:
url = k.getURL(size='Medium’, urlType=’source')
urllist.append(url)
image = urllib.URLopener()
image.retrieve(url, os.path.basename(urlparse.urlparse(url).path))
print ’downloading:’, url

If you also want to write the list of urls to a text ﬁle, add the following lines at the end.

# write the list of urls to file
fl = open('urllist.txt', 'w')
for url in urllist:

fl.write(url+'\n')
fl.close()

From the command line, just type

$ python tagdownload.py goldengatebridge

and you will get the 100 latest images tagged with "goldengatebridge". As you can
see, we chose to take the "Medium" size. If you want thumbnails or full size originals
or something else, there are many sizes available, check the documentation on the
Flickr website http://flickr. com/api/.

Here we were just interested in downloading images, for API calls that require
authentication the process is slightly more complicated. See the API documentation
for more information on how to set up authenticated sessions.

B.2 Panoramic

A good source of geotagged images is Google’s photo-sharing service Panoramio (http:

//www. panoramio . com/). This web service has an API to access content programmat-
ically. The API is described at http : //www. panoramio . com/api/. You can get website
widgets and access the data using JavaScript objects. To download images, the sim-
plest way is to use a GET call. For example:

288 B.2.Panoranuo

