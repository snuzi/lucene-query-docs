Image resizing

NumPy arrays will be our main tool for working with images and data. There is no
simple way to resize arrays, which you will want to do for images. We can use the PIL
image object conversion shown earlier to make a simple image resizing function. Add
the following to imtoo1s.py.

def imresize(im,sz):
""” Resize an image array using PIL. ""”
piliim = Image.fromarray(uint8(im))

return array(pi1,im.resize(sz))

This function will come in handy later.

Histogram equalization

A very useful example of a graylevel transform is histogram equalization. This trans-
form ﬂattens the graylevel histogram of an image so that all intensities are as equally
common as possible. This is often a good way to normalize image intensity before
further processing and also a way to increase image contrast.

The transform function is in this case a cumulative distribution function (cdf) of the
pixel Values in the image (normalized to map the range of pixel Values to the desired
range).

Here's how to do it. Add this function to the ﬁle imtoo1s.py.

def histeq(im,nbr,bins=256):
""” Histogram equalization of a grayscale image. ""”

# get image histogram

imhist,bins = histogram(im.flatten(),nbr,bins,normed=True)
cdf = imhist.cumsum() # cumulative distribution function
cdf = 255 * cdf / cdf[-1] # normalize

# use linear interpolation of cdf to find new pixel values
im2 = interp(im.f1atten(),bins[:-l],cdf)

return im2.reshape(im.shape), cdf

The function takes a grayscale image and the number of bins to use in the histogram
as input and returns an image with equalized histogram together with the cumulative
distribution function used to do the mapping of pixel values. Note the use of the last
element (index -1) of the cdf to normalize it between 0 . . . 1. Try this on an image like
this:

24 1.3.NumPy

