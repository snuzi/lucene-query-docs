To read the coordinates from the ﬁle, add the following function that uses minidom to
a new ﬁle 1'mreg1'strat1'on.py.

from Xm1.dom import minidom

def read,points,from_xm1(xm1Fi1eName):
""" Reads control points for face alignment. """

xmldoc = minidom.parse(xm1Fi1eName)
facelist = xmldoc.getE1ementsByTagName('face')
faces = {}
for xm1Face in facelist:
fi1eName = xm1Face.attributes['fi1e'].va1ue
xf = int(xm1Face.attributes['xf'].va1ue)
yf = int(xm1Face.attributes['yf'].value)
xs = int(xm1Face.attributes['xs'].value)
ys = int(xmlFace.attributes['ys'].value)
xm = int(xm1Face.attributes['xm'].va1ue)
ym = int(xm1Face.attributes['ym'].value)
faces[fi1eName] = array([xf, yf, xs, ys, xm, ym])
return faces

The landmark points are returned in a Python dictionary with the ﬁlename of the
image as key. The format is; Xf,yf coordinates of the leftmost eye in the image (the
person's right), Xs,ys coordinates of the rightmost eye and Xm,ym mouth coordinates.
To compute the parameters of the similarity transformation we can use a least squares
solution. For each point x,- = [$1-,y¢] (in this case there are three of them), the point
should be mapped to the target location [33, y)] as

l:$:l = [2 fl l::l + [Z]

Taking all three points, we can rewrite this as a system of equations with the unknowns

a, b, 25$, ty like this
IE1 301 -111
231 1/1 $1

_ |£E2 —y2
Z/2 IE2

n

533 $3 —y3 0 ty
393 113 $3 0 1

Here we used the parameterization of similarity matrices

[2 :1  [:::§3§ ;:;12é?l = SR»

HOHQH
O

88 3.2. Warping images

